{
	type result = Int of int
	| Float of float
	| String of string
	| Id of string
	| Plus_op of char
	| Min_op of char
	| Mult_op of char
	| Div_op of char;;
}

let digit = '-'?['0'-'9']
let digits = digit +
let lower = ['a'-'z']
let upper = ['A'-'Z']
let letter = lower | upper
let letters = letter +
let id = (letter | '_') letters*
let Plus_op = '+'
let Min_op = '-'
let Mult_op = '*'
let Div_op = '/'

rule main = parse
     digits '.' digits as f { Float (float_of_string f)
     	    	       	      :: main lexbuf }
   | digits as n	    { Int (int_of_string n)
     	       		      :: main lexbuf }
   | id as s	            { Id s :: main lexbuf }
   | Plus_op as op          { Plus_op op :: main lexbuf }
   | Min_op as op           { Min_op op :: main lexbuf }
   | Mult_op as op          { Mult_op op :: main lexbuf }
   | Div_op as op           { Div_op op :: main lexbuf }
   | eof     		    { [] }
   | _ 			    { main lexbuf }

 {
	let newlexbuf =
	    let x = (Lexing.from_string "Christian -5 + 19.5 jon - 25") in
	    (* let _ = print_string "Ready to lex ...\n" in *)
	    main x
  ;;
 }